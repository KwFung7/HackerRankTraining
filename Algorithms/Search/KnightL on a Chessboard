import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    private static int n;
    static class node {
        private int x;
        private int y;
        private int count;
        public node(int x, int y, int count) {
            this.x = x;
            this.y = y;
            this.count = count;
        }
    }
    private static void stepCount(int x, int y, int count, LinkedList<node> queue, boolean[][] visited) {
        if (visited[x][y]) { return; }
        queue.add(new node(x, y, count));
        visited[x][y] = true;
    }
    private static int bfs(int i, int j) {
        LinkedList<node> queue = new LinkedList<node>();
        boolean[][] visited = new boolean[n][n];
        queue.add(new node(0, 0, 0));
        visited[0][0] = true;
        
        while (queue.size() != 0) {
            node current = queue.remove();
            int x = current.x;
            int y = current.y;
            int count = current.count;
            
            if ((x + i >= 0) && (x + i < n) && (y + j >= 0) && (y + j < n)) {
                if ((x + i == n - 1) && (y + j == n - 1)) {
                    return count + 1;
                }
                stepCount(x + i, y + j, count + 1, queue, visited);
            }
            if ((x + i >= 0) && (x + i < n) && (y - j >= 0) && (y - j < n)) {
                stepCount(x + i, y - j, count + 1, queue, visited);
            }
            if ((x - i >= 0) && (x - i < n) && (y + j >= 0) && (y + j < n)) {
                stepCount(x - i, y + j, count + 1, queue, visited);
            }
            if ((x - i >= 0) && (x - i < n) && (y - j >= 0) && (y - j < n)) {
                stepCount(x - i, y - j, count + 1, queue, visited);
            }
            
            if ((x + j >= 0) && (x + j < n) && (y + i >= 0) && (y + i < n)) {
                if ((x + j == n - 1) && (y + i == n - 1)) {
                    return count + 1;
                }
                stepCount(x + j, y + i, count + 1, queue, visited);
            }
            if ((x + j >= 0) && (x + j < n) && (y - i >= 0) && (y - i < n)) {
                stepCount(x + j, y - i, count + 1, queue, visited);
            }
            if ((x - j >= 0) && (x - j < n) && (y + i >= 0) && (y + i < n)) {
                stepCount(x - j, y + i, count + 1, queue, visited);
            }
            if ((x - j >= 0) && (x - j < n) && (y - i >= 0) && (y - i < n)) {
                stepCount(x - j, y - i, count + 1, queue, visited);
            }
        }
        return -1;
    }
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        StringBuilder s = new StringBuilder();
        n = in.nextInt();
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < n; j++) {
                s.append(bfs(i, j) + " ");
            }
            s.append("\n");
        }
        System.out.print(s);
        in.close();
    }
}

