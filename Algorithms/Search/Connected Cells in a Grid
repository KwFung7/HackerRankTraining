import java.io.*;
import java.util.*;

public class Solution {
    
    private static int n;
    private static int m;
    private static int count = 1;
    private static int largest_region = 1;
    static class cell {
        private int x;
        private int y;
        public cell(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    private static void step(int x, int y, LinkedList<cell> list, int[][] matrix, boolean[][] visited) {
        if ((matrix[x][y] == 0) || (visited[x][y])) { return; }
        count++;
        if (count > largest_region) {
            largest_region = count;
        }
        list.add(new cell(x, y));
        visited[x][y] = true;
    }
    private static void bfs(int i, int j, int[][] matrix, boolean[][] visited) {
        if ((matrix[i][j] == 0) || (visited[i][j])) { return; }
        LinkedList<cell> list = new LinkedList<cell>();
        list.add(new cell(i, j));
        visited[i][j] = true;
        
        while (list.size() != 0) {
            cell current = list.remove();
            int x = current.x;
            int y = current.y;
            
            if ((x + 1 < n) && (y + 1 < m)) {
                step(x + 1, y + 1, list, matrix, visited);
            }
            if ((x + 1 < n) && (y - 1 >= 0)) {
                step(x + 1, y - 1, list, matrix, visited);
            }
            if ((x - 1 >= 0) && (y + 1 < m)) {
                step(x - 1, y + 1, list, matrix, visited);
            }
            if ((x - 1 >= 0) && (y - 1 >= 0)) {
                step(x - 1, y - 1, list, matrix, visited);
            }
            if (x + 1 < n) {
                step(x + 1, y, list, matrix, visited);
            }
            if (x - 1 >= 0) {
                step(x - 1, y, list, matrix, visited);
            }
            if (y + 1 < m) {
                step(x, y + 1, list, matrix, visited);
            }
            if (y - 1 >= 0) {
                step(x, y - 1, list, matrix, visited);
            }
        }
    }
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = in.nextInt();
        int[][] matrix = new int[n][m];
        boolean[][] visited = new boolean[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = in.nextInt();
            }
        }
        in.close();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                count = 1;
                bfs(i, j, matrix, visited);
            }
        }
        System.out.print(largest_region);
    }
}
